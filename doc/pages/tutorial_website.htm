<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Website Tutorial - Wave Framework</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width"/> 
		<link type="text/css" href="../style.css" rel="stylesheet" media="all"/>
		<link rel="icon" href="../../favicon.ico" type="image/x-icon"/>
		<link rel="icon" href="../../favicon.ico" type="image/vnd.microsoft.icon"/>
	</head>
	<body>
	
		<h1>How to Build a Simple Website With Wave Framework</h1>
		
			<h2>Introduction</h2>
			
				<p>Wave is a PHP micro-framework that is built loosely following model-view-control architecture and factory method design pattern. It is made for web services, websites and info-systems and is built to support a native API (Application Programming Interface) architecture, caching and smart resource management. Wave is a compact framework that does not include bloated libraries and features and is developed keeping lightweight speed and optimizations in mind.</p>
				
				<p>This tutorial takes a look at how to build a simple website with Wave Framework. It is recommended that you first go through the Web Service Tutorial, since we will be using the same Models and Controllers here - albeit slightly modified - to build a website around these methods.</p>
				
				<p>This tutorial focuses only on building a website that works through URL's only. It does not do any AJAX requests, which means that every view will be on a separate URL. This tutorial will give an overview about how to build your Sitemap, how to build your Views and implement functionality of Controllers and Models.</p>
			
				<p>Wave Framework does come with a View and URL controllers to build websites with. These two Controllers can be edited by you at any time and they are stored in '/controllers/' subfolder. You can read more about tweaking the URL and View Controllers in documentation about those Controllers, this tutorial will use the default URL and View Controllers.</p>
				
				<p>Complete files of this tutorial are available in '/doc/examples/website/' subfolder in the downloaded archive. If you wish to test the example without writing the tutorial code yourself, then you should copy these files to root folder of your Wave Framework. Note that this will overwrite your default '/resources/api.profiles.ini' as well as '/resources/en.sitemap.ini' and '/resources/style.css' files. You should make a backup of these files in case you have modified these files yourself already.</p>
				
			<h2>Planning</h2>
			
				<p>If you have already gone through the previous Web Service tutorial where you created the basic Controllers and Models for your web service, then you already have the functionality that you need to build a website that uses these Controllers and Models.</p>
				
				<p>If you did not go through the first tutorial, then you can get the Controller and Model files from the previous tutorials finished example at '/doc/examples/webservice/'.</p>
				
				<p>The Web Service tutorial was about creating a simple Web Service that you can use to store information about your favorite DVD movies and then return information about those movies. In this tutorial we will be using that web service and build a website around it.</p>
				
				<p>This type of website will require different page views that will be shown under different URL's for the user. Every view acts essentially as a template where we can load logic to, thus these are the views that would be required for this service:</p>
				
				<ul>
					<li>A common content page for home view as well as for other simple content pages, such as the About page.</li>
					<li>A page where you can insert movie information and add it to a list.</li>
					<li>A page where you can see a list of your movies and click on them.</li>
					<li>A page that shows the information of just a single movie.</li>
				</ul>
				
				<p>While our web service also allows to remove movies from the database, we will not be using that part of the service as part of this tutorial, since the mechanics of doing it are similar to adding a movie and you can develop this feature by yourself.</p>
				
				<p>We will also not be needing a database for this service, just like we did not need a database in Web Service tutorial, as we will be storing movie data in filesystem as a serialized array. But of course you are free to update the Model file to make database requests for storing and querying movie information.</p>
				
			<h2>Configuration and Set-up</h2>
				
				<p>The first thing that you need to do, when setting up Wave Framework for a website, is to think about the languages that you need to implement and then about the actual pages that your website will have.</p>
				
				<p>Languages are stored in your Configuration in '/config.ini' file. The Configuration option 'languages' is a comma-separated list of languages that Wave Framework will use in your system. The keywords and/or abbreviations in that value are used by Wave Framework to find files that are related to these languages. By default we will keep the setting at 'en', which means that our system requires just these two files (they are there in default Framework setup as well):</p>
				
				<ul>
					<li><b>/resources/en.translations.ini</b> - File that contains translations and translation keywords</li>
					<li><b>/resources/en.sitemap.ini</b> - File that includes file URL's that are used by this language as well as what views this or that URL loads.</li>
				</ul>
				
				<h3>Translations</h3>
				
					<p>Translations is the file that stores keys and their translation values for your website. While this tutorial will build a website in just one language, it is always a good idea to include any type of text messages that you implement in your User Interface - and thus Views - in the translations file. This makes it easier to later on add multiple languages to your website.</p>
					
					<p>While you do not have to populate your translations file before starting development, we will be doing it here so that we do not have to keep returning to the translations file in other sections of the tutorial. These are the translation keys and values that we are using, store them in your Translations INI file:</p>
					
<pre>
	<code>
	welcome="Welcome to my DVD List website!"
	about-content="This is an example website made with Wave Framework"
	contact-content="Contact us at info@waveframework.com"
	title="Title"
	year="Year"
	problem-adding-movie="There was a problem adding a movie!"
	movie-added="Movie added successfully!"
	cannot-find-movies="Cannot find movies!"
	cannot-find-movie="Cannot find this movie!"
	movie-info="Movie information"
	add-movie="ADD MOVIE"
	back-to-list="Back to list"
	</code>
</pre>

					<p>Later on we will be using these translations keywords to implement these translations within our User Interface.</p>
					
					<p>One more thing: if you are building a large website that has language specific content that spans entire pages, then it is recommended to store page content itself not in translations, but in the database and load it from database. While we load content for About and Contact pages in this tutorial from the same translations file, pages like this are ones you would usually store in database due to the large amount of content in those pages. It is not recommended to only store User Interface translations in translations file, like for buttons, error messages and form labels.</p>
				
				<h3>Sitemap</h3>
				
					<p>Sitemap is the file that includes all the URL's that can be requested from the website without a '404 Not Found' message being returned. Wave Framework has a very detailed sitemap system that gives you an almost unrestricted control over how URL's work on your system and how they are interpreted.</p>
					
					<p>Note that Wave Framework Configuration has some settings that deal with URL handling as well. One of them is the 'enforce-first-language-url' setting. If this setitng is set to 1, then this means that if you go to home page, like 'http://www.example.com/', then you would be redirected automatically to URL that includes the appended language keyword as a URL node. By default this would redirect to 'http://www.example.com/en/'. If you do not wish to use this behavior then you can turn this setting off (note that other languages would still have to use the language node).</p>
					
					<p>Wave Framework will look for a match from Sitemap file without that language URL node, so in the Sitemap file you should never write the language node itself as part of the URL that is being requested. This will be shown in the examples below as well.</p>
					
					<p>Your Wave Framework Configuration has two Sitemap-related settings that are used in Wave Framework for situations when the URL is not set (which is considered the Home page) or a URL is not found (which would be the 404 Not Found page). By default the Home page will call a view named 'home' and 404 page will call a view named '404'. You can edit these values in Configuration, they are the 'home-view' and '404-view' settings.</p>
					
					<p>This 404 view and Home view are stored in these two files by default:</p>
				
					<ul>
						<li><b>/views/home.view.php</b> - We will be editing this view to suit our needs.</li>
						<li><b>/views/404.view.php</b> - This will act like any other view, but we will not be editing this view in this tutorial and you can tweak it to your liking yourself.</li>
					</ul>
					
					<p>In the Planning section above we listed the views that we would need in our system. Before we can start working on them and create files for them, it is a good idea to declare them in our Sitemap, which is stored in '/resources/en.sitemap.ini' file.</p>
					
					<p>Sitemap file consists of URL's, that are declared in square brackets, and their settings, which are assigned below them. These URL's in the brackets are language specific, which means that these URL's can be localized. The first view we would need to define would be the Home View (note that 404 View is not defined in Sitemap, since it does not carry additional functionality). This here would be a simple Home View definition in our Sitemap:</p>
					
<pre>
	<code>
	[home]
	view="home"
	meta-title="Home"
	cache-timeout=30
	</code>
</pre>

					<p>The keyword in the brackets is the URL where the page would be accessed. But this is technically not required for a Home View, since Home Views are automatically redirected by URL Controller to a URL that does not include a URL node. This means that when go to an address of 'http://www.example.com/en/home/' then the client would be redirected to 'http://www.example.com/en/', or 'http://www.example.com/' - latter example only when you have the 'enforce-first-language-url' setting set to 0.</p>
					
					<p>This Sitemap file includes a number of settings for our Home View too. The 'view' variable tells Wave Framework that if this URL is loaded, then the View Controller should load the View named 'home'. This View would be loaded from '/views/view.home.php' file.</p>
					
					<p>The 'meta-title' keyword tells View Controller to prepend the Meta Title of the project with 'Home' text, which will be shown on your browser bar or browser tab.</p>
					
					<p>The 'cache-timeout' flag tells Wave Framework that this page can be entirely cached for 30 seconds, which means that if another request is made to the page with similar conditions within 30 seconds, then it will return a result from cache rather than generate it again.</p>
					
					<p>The next two URL's that we need to define are for the About and Contact pages. Example declarations for these two are here:</p>
					
<pre>
	<code>
	[about]
	view="page"
	subview="about"
	meta-title="About"

	[contact]
	view="page"
	subview="contact"
	meta-title="Contact"
	</code>
</pre>

					<p>The same 'view' setting is used by both of these URL's, as you can see. This means that they both load the '/views/view.page.php' file. This is useful when you have multiple views that are very similar to one another - these two pages are indeed very similar since they only display content.</p>
					
					<p>What differentiates these two pages is the 'subview' variable, which is set to 'about' on one and 'contact' on another. This variable can be detected by the View and thus load different content for that specific View, even within the same View method. Example of how to do this is also covered below.</p>
					
					<p>These views would be loaded when user goes to a URL that matches the value that is defined in the brackets in Sitemap file. About page would be loaded on either 'http://www.example.com/en/about/' or 'http://www.example.com/about/' URL and so on.</p>
					
					<p>Next we need a page where we will display a form that will be used for movie-adding functionality. We will also need a View for the page where we will show a list of movies. Both of these URL's will load their own View files and should be defined like this:</p>
					
<pre>
	<code>
	[movies/add]
	view="add"
	meta-title="Add a movie"

	[movies/list]
	view="list"
	meta-title="List of movies"
	</code>
</pre>

					<p>These URL's are different from the URL's we defined before, because these URL's include a slash in the URL declaration. URL Controller in Wave Framework will still match the entirety of that URL however. Which means that if the client makes a request for 'http://www.example.com/en/movies/list/' URL, then 'list' View will be returned. Same for URL for the 'add' View.</p>
					
					<p>Last but not least, we need a URL which will be used when we are showing a page about a single movie. Movie page is different from other pages in one very notable way: you can have multiple movie pages. For example, movie with an ID of 1 would be displayed in the URL of 'http://www.example.com/movie/1/', while movie with an ID of 20 would be 'http://www.example.com/movie/20/'.</p>
					
					<p> But there is no need to define all of those URL's in your Sitemap file. In order to implement a dynamic URL like that, it needs to be defined like this:</p>
					
<pre>
	<code>
	[movie]
	view="movie"
	meta-title="Movie information"
	unsolved-url=1
	</code>
</pre>

					<p>What this 'unsolved-url' setting does is that it tells Wave Framework that if it finds that the client requests a URL that only partially matches this URL in the sitemap, then it will not show a 404 Not Found page that it would usually and instead still allows to load this view.</p>
					
					<p>In other words, if you would go on an URL like 'http://www.example.com/movie/23/' then Wave Framework would throw a 404 Not Found page by default. But because 'unsolved-url' is set to true in Sitemap, then Wave Framework will still load the nearest matching URL and still load the 'movie' View.</p>
					
					<p>This allows us to then use that unsolved URL as a value when generating the view, such as for loading a movie with the ID of 23. This will be shown later on in the tutorial.</p>
				
				<h3>Stylesheets and JavaScript</h3>
				
					<p>Websites also implement stylesheets and JavaScript. While this tutorial does not cover the topic of JavaScript integration and AJAX calls with Wave Framework, both of these topics are available and documented in other parts of the documentation extensively.</p>
					
					<p>The main CSS stylesheet and JavaScript files are stored in '/resources/style.css' '/resources/script.js' respectively. These files, together with jQuery, are loaded automatically by the View Controller. If you wish to alter this behavior in any way, then you can edit the View Controller file in '/controllers/controller.view.php'.</p>
					
					<p>As an addition, Wave Framework also supports view-specific on-demand stylesheets and scripts. This means that if the View Controller is loading a view for 'home', for example, then it would also load the Stylesheet file from '/resources/home.style.css' and JavaScript from '/resources/home.script.js' if they are available.</p>
					
					<p>View Controller also does other things, such as unifying resources so that reducing the number of HTTP request by unifying or even minifying some script resources. You can read about these features in other parts of the documentation.</p>
					
					<p>In this tutorial, the only thing we will be doing is setting up the CSS styles. This is the stylesheet that will be used:</p>
					
<pre>
	<code>
	body,html {
		background-color: #e8decc;
		font: 13px Verdana;
		color: #221e18;
	}
	p { 
		margin:6px 0px; 
	}
	a {
		font:12px Verdana;
		color:#000000;
	}
	#header { 
		font: 20px Verdana;
		color: #ffffff;
		border-width: 2px;
		border-radius: 8px 8px 8px 8px; 
		background-color: #c0ac8a;
		text-shadow: 0px -1px 0px rgba(0, 0, 0, 0.25); 
		margin: 10px;
		padding: 10px;
		width: 500px;
		height:32px;
		margin-left: auto;
		margin-right: auto;
	}
	#header a {
		display: block;
		float: right; 
		border-width: 2px;
		border-radius: 8px 8px 8px 8px; 
		background-color: #736449;
		margin: 3px;
		padding: 5px;
		font: 14px Verdana;
		color: #ffffff;
		text-shadow: 0px -1px 0px rgba(0, 0, 0, 0.25); 
		text-decoration: none;
	}
	#header a.active {
		background-color: #9d8663;
	}
	#header a:hover {
		background-color: #847256;
	}
	#body {
		margin: 10px;
		padding: 10px;
		width: 500px;
		margin-left: auto;
		margin-right: auto;
		border-radius: 8px 8px 8px 8px; 
		background-color: #ffffff;
	}
	input,select {
		font: 13px Verdana;
		color: #221e18;
		padding: 4px;
		width:150px;
	}
	#movies td, #movies th {
		padding:4px 8px;
	}
	#movies td, #movies th, #movies td a {
		font: 15px Verdana;
		color: #000000;
	}
	#movies th {
		font-weight: bold;
		background-color:#d6d6d6;
	}
	#movies td a {
		font-weight: bold;
		text-decoration: underline;
	}
	</code>
</pre>

						<p>These styles do very basic things, like assign our web page colors as well as the style the header and menu that will be used as part of the HTML content.</p>
						
				<h2>Preparing for View Building</h2>
				
					<p>Large part of website creation - once you have the Web Service functionality already - is about building Views. Wave Framework loads its Views through View Controller.</p>
					
					<p>When it comes to building your HTML 'frame' and header declarations, then it is recommended to either declare them in View Controller (that is loaded every time when webpage is requested), or add or modify functionality of View Controller to load view components based on your request. By default, the View Controller has a default HTML framew that it returns to the client directly. If your web service is simple, then you get a very slight speed benefit by saving the amount of API calls you have to do.</p>
					
					<p>We will not be building our headers in View Controller as part of this tutorial and instead leave View Controller untouched. This is because it is easier for you to handle every view as independently as possible in the beginning. This gives a better understanding about how to build views since you can focus on one view at the time.</p>
					
					<p>Later on you can take out the duplicated code from the Views and implement it in View Controller or through other API calls.</p>
					
				<h2>Home View</h2>
				
					<p>As the first step you should create a new View file in '/views/' subfolder and name it 'view.home.php'. This is the file and View class declaration that is referenced in the Sitemap file.</p>
					
					<p>It is recommended for the View to be extended from WWW_Factory and named as 'WWW_view_home'. View Controller also loads 'render()' method by default with the input data from View Controller (you can see how that is done when looking into the View Controller data), so it is a good idea to define this method as well. There are no parameters that are required for a View class.</p>
					
					<p>This would be a base frame for the home View class:</p>
						
<pre>
	<code>
	class WWW_view_home extends WWW_Factory {

		// WWW_controller_view calls this function as output for page content
		public function render($input){
		
		}

	}
	</code>
</pre>

					<p>Inside this 'render()' method you should build your HTML Frame. For this tutorial, we will keep the HTML frame as simple as possible, so it will just consist of a header that contains menu links and a body that shows the content.</p>

					<p>So, to start things up, we would be using a HTML body like the one below. Place this HTML to your 'render()' method call, but outside the PHP tags, like this:</p>

<pre>
	<code>
	...
	public function render($input){
		?&gt;
			&lt;div id=&quot;header&quot;&gt;
				&lt;a href=&quot;#&quot;&gt;Some Link&lt;/a&gt;
				&lt;a href=&quot;#&quot;&gt;Some Other Link&lt;/a&gt;
				&lt;a href=&quot;#&quot;&gt;Some Third Link&lt;/a&gt;
			&lt;/div&gt;
			&lt;div id=&quot;body&quot;&gt;
				&lt;p&gt;Some page content&lt;/p&gt;
			&lt;/div&gt;
		&lt;?php
	}
	...
	</code>
</pre>

					<p>If you now upload your edited files and make a request to the root page of your website, then you should see a beige-colored HTML as your website. If some of the files, such as CSS stylesheet, is in the cache from previous requests you might have made, then you should refresh your browser again with CTRL+F5 or by clearing cache and loading the page once more.</p>
					
					<p>You can also make a request to '/tools/debugger.php' script every now and then to see if your system is throwing any PHP errors or warnings at any point. This is also the file you should refer to whenever your application throws that critical error message, since this Debugger script gives detailed information about what went wrong. Wave Framework automatically suppresses PHP errors from the User Interface directly in order to make sure no sensitive information is ever shown to the client directly. Note that the Debugger requires an HTTP authentication with the username and password that are stored in your systems Configuration.</p>
					
					<p>The HTML frame given above is not really suitable for our website since it does not have the working links that we would expect nor does it have the content from our Translations files or the movie database. So the first thing we should set up is the use of translations.</p>
					
					<p>Translations are stored in an array that is populated from values of translations keywords and values from '/resources/[language].translations.ini' file. The translations file, that Wave Framework loads, is based on what language it detects from the URL that the client is requesting. Since we have only defined a single language - 'en' for English - then our translations file should include translations for that language.</p>
					
					<p>We have to make the following method call within our View in order to access our translations:</p>
						
<pre>
	<code>
	...
	// Loading translations
	$translations=$this->getTranslations();
	...
	</code>
</pre>

					<p>And as a result, we can update our Home view and make it use those translations in the page content directly. This is how you should update your View class:</p>	
					
<pre>
	<code>
	...
	// Get translations
	$translations=$this->getTranslations();
	...
		&lt;div id=&quot;body&quot;&gt;
			&lt;p&gt;&lt;?=$translations['welcome']?&gt;&lt;/p&gt;
		&lt;/div&gt;
	...
	</code>
</pre>
						
					<p>When you now upload the files again and test the home page, then you should see that the value from Translations file is used within the content. If this did not work, then look at the example files that are provided for this tutorial, which shows how to implement this in case you ran into a problem.</p>
						
					<p>But we are still missing the correct links for our header menu. In order to know what the actual URL's are, we need to reference our current Sitemap. Similarly to Translations, this Sitemap is returned based on what language is used by Wave Framework.</p>
						
					<p>The returned Sitemap array is not a direct representation of the Sitemap INI file the way translations array is for Translations INI. This means that Wave Framework parses through the Sitemap and generates an array that is useful for building a website Views. To get the Sitemap that is generated from the Sitemap that we set up earlier, you have to call this method:</p>
						
<pre>
	<code>
	...
	$sitemap=$this->getSitemap();
	...
	</code>
</pre>

					<p>And here are some (not all) of the array elements of our returned Sitemap, shown as an example:</p>
						
<pre>
	<code>
    [list] => Array
        (
            [view] => list
            [meta-title] => List of movies
            [url] => /w/en/movies/list/
        )
		
    [page/about] => Array
        (
            [view] => page
            [subview] => about
            [meta-title] => About
            [url] => /w/en/about/
        )

    [movie] => Array
        (
            [view] => movie
            [meta-title] => Movie information
            [unsolved-url] => 1
            [url] => /w/en/movie/
        )
	</code>
</pre>
					
					<p>The way this Sitemap works within Wave Framework is that the keys in that array are not the URL itself anymore (like they were in the Sitemap file) and they are a view and subview address instead. This is useful, since if you have a website with multiple languages, then you can use that same address for all of your languages and Wave Framework itself will know what language URL to place.</p>
					
					<p>In case multiple URL's use the same view, then you can refer to them based on the 'subview' value you set in Sitemap INI file. This is why the Sitemap array returns 'page/about', since there was a Sitemap URL for 'about' that used the view of 'page' and had subview of 'about' set for it.</p>
					
					<p>Sitemap array also includes things like Sitemap settings that were stored in Sitemap file. For example, the 'movie' Sitemap node includes a variable of 'unsolved-url' that says that this page allowed unsolved URL nodes.</p>
					
					<p>Sitemap array also includes new generated values, such as the 'url' variable, which are links to the page from the Sitemap. It also includes the the meta-title which you can (but don't have to) use as the title for the link.</p>
					
					<p>We will simply use the variables from the array returned by getSitemap() method call and build a header menu from out Sitemap like this:</p>
						
<pre>
	<code>
	// Loading Sitemap
	$sitemap=$this->getSitemap();
	...
		&lt;div id=&quot;header&quot;&gt;
			&lt;a href=&quot;&lt;?=$sitemap['page/contact']['url']?&gt;&quot;&gt;&lt;?=$sitemap['page/contact']['meta-title']?&gt;&lt;/a&gt;
			&lt;a href=&quot;&lt;?=$sitemap['page/about']['url']?&gt;&quot;&gt;&lt;?=$sitemap['page/about']['meta-title']?&gt;&lt;/a&gt;
			&lt;a href=&quot;&lt;?=$sitemap['add']['url']?&gt;&quot;&gt;&lt;?=$sitemap['add']['meta-title']?&gt;&lt;/a&gt;
			&lt;a href=&quot;&lt;?=$sitemap['list']['url']?&gt;&quot;&gt;&lt;?=$sitemap['list']['meta-title']?&gt;&lt;/a&gt;
			&lt;a href=&quot;&lt;?=$sitemap['home']['url']?&gt;&quot;&gt;&lt;?=$sitemap['home']['meta-title']?&gt;&lt;/a&gt;
		&lt;/div&gt;
	...
	</code>
</pre>

					<p>Note that we are adding the links in a reverse order to our HTML because our CSS has a rule that floats all of the links to the right. This means that the first element will be the rightmost menu element. You can change this behavior by using different CSS for your menus if you want.</p>
					
					<p>If you now upload the file then you should see your actual menu in the header. But note that the other links do not work yet and if you click on them, then you get the dreaded 'WE ARE CURRENTLY EXPERIENCING A PROBLEM WITH YOUR REQUEST' message. Wave Framework will also write to an error log whenever a message like this appears and you can see the detailed description about the error when loading the Debugger script.</p>
					
					<p>The reason why this error is shown - instead of the 404 page - is because we have defined the URL's in our Sitemap, but Wave Framework is unable to find the View files and class definitions for these Views that are declared in the Sitemap.</p>
					
					<p>We should also add a call to getState('view') to our Views 'render()' method. What to use it for will be shown in the next section, but since we will be using this Home View as a base template to our other Views, then it is good to have it there from the beginning.</p>
					
					<p>This is our finished Home View:</p>
						
<pre>
	<code>
	class WWW_view_home extends WWW_Factory {
		// View Controller calls this function as output for page content
		public function render($input){
			// Loading translations
			$translations=$this-&gt;getTranslations();
			// Loading sitemap
			$sitemap=$this-&gt;getSitemap();
			// Loading view data
			$view=$this-&gt;getState('view');
			?&gt;
				&lt;div id=&quot;header&quot;&gt;
					&lt;a href=&quot;&lt;?=$sitemap['page/contact']['url']?&gt;&quot;&gt;&lt;?=$sitemap['page/contact']['meta-title']?&gt;&lt;/a&gt;
					&lt;a href=&quot;&lt;?=$sitemap['page/about']['url']?&gt;&quot;&gt;&lt;?=$sitemap['page/about']['meta-title']?&gt;&lt;/a&gt;
					&lt;a href=&quot;&lt;?=$sitemap['add']['url']?&gt;&quot;&gt;&lt;?=$sitemap['add']['meta-title']?&gt;&lt;/a&gt;
					&lt;a href=&quot;&lt;?=$sitemap['list']['url']?&gt;&quot;&gt;&lt;?=$sitemap['list']['meta-title']?&gt;&lt;/a&gt;
					&lt;a href=&quot;&lt;?=$sitemap['home']['url']?&gt;&quot;&gt;&lt;?=$sitemap['home']['meta-title']?&gt;&lt;/a&gt;
				&lt;/div&gt;
				&lt;div id=&quot;body&quot;&gt;
					&lt;p&gt;&lt;?=$translations['welcome']?&gt;&lt;/p&gt;
				&lt;/div&gt;
			&lt;?php
		}
	}
	</code>
</pre>
					
				<h2>About and Contact Pages</h2>
				
					<p>About and Contact pages are technically similar to our Home View. To start things up, it is recommended to simply copy the 'view.home.php' file in '/views/' folder and rename the file to 'view.page.php', since both Contact and About pages use the same 'page' view.</p>
					
					<p>You also have to rename this class name to 'WWW_view_page', otherwise Wave Framework will encounter an error, since it expects to load a class with that name from the file.</p>
					
					<p>We will be building our About and Contact pages a the same time. The main difference between our previous 'home' View and the new 'page' View is that About and Contact pages are both using the 'page' View. The only difference between these two URL's in our Sitemap was that one had the 'subview' value set to 'about' and the other had the value set to 'contact'.</p>
					
					<p>This means that in the body section we need to separate which content is loaded in order to separate the two contents. We are loading our page content from translations file, but it could just as easily be loaded from a database and from some content management system or even over API from some other system.</p>
					
					<p>In order to learn what 'subview' is currently being used we have to request the currently known View data from our system State. Wave Frameworks State stores information about the entire current system, environment and its configuration (you can read more about State in other parts of the documentation). But to get the information that we want about the currently loaded view, then you can get it with the following call:</p>
						
<pre>
	<code>
	...
	$view=$this->getState('view');
	...
	</code>
</pre>

					<p>We actually added the above code snippet to our final example from the previous section, so make sure you don't accidentally declare it twice.</p>

					<p>This array stores a lot more information about the currently loaded View, most of it is also from the Sitemap file, based on the declaration that we set up. You can check what this variable contains by printing out the contents of the array, but the only thing we actually want from the array right now is one of the values from view data: 'subview'. This is the value that we will be using to check which of the pages is loaded: About or Contact.</p>
					
					<p>Our previously built Home View - that we used as a base code for our Page View - stored only one translation in the 'div' tag that was assigned for body. It should now be replaced with 'subview' check for About and Contact pages and in order to do that, like this:</p>
						
<pre>
	<code>
	// Loading view data
	$view=$this->getState('view');
	...
		&lt;div id=&quot;body&quot;&gt;
			&lt;?php
				switch($view['subview']){
					case 'about':
						echo '&lt;p&gt;'.$translations['about-content'].'&lt;/p&gt;';
						break;
					case 'contact':
						echo '&lt;p&gt;'.$translations['contact-content'].'&lt;/p&gt;';
						break;
				}
			?&gt;
		&lt;/div&gt;
	...
	</code>
</pre>

					<p>If you upload the files to the server now, then your Home, About and Contact pages should all work without any problems when you click on their links in the header menu. If you run into any problems, then please refer to the example files and see if there are any differences or see if Debugger script has logged any errors.</p>
					
				<h2>Adding a Movie - Part I</h2>
				
					<p>Movie adding page is essentially a HTML form that submits form data to Wave Framework API over HTTP. This means that in Wave Framework your data submissions should never be sent to another website page or View itself. Views should be entirely independent from any form submission logic and hooks.</p>
					
					<p>I suggest you make a copy of 'view.home.php' and rename it to 'view.add.php' in order to use the 'home' View that we built as a template for this new View. Also rename the class name to 'WWW_view_home'.</p>

					<p>The reason we make copies of the Home View is because it's the most basic of Views in our system. While it would be useful to actually define headers and footers elsewhere, such as in View Controller or loaded from View Controller, for the purpose of the tutorial it is better to handle each View as a self-contained and functioning page.</p>
					
					<p>You should replace the body content with a simple HTML form that also calls some of our translation values. We will generate just two fields: one for the movie title and another for the year that movie was released. Like this:</p>
						
<pre>
	<code>
	...
	&lt;form method=&quot;post&quot; action=&quot;#&quot;&gt;
		&lt;p&gt;&lt;?=$translations['title']?&gt;:&lt;/p&gt;
		&lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;title&quot; value=&quot;&quot;/&gt;&lt;/p&gt;
		&lt;p&gt;&lt;?=$translations['year']?&gt;:&lt;/p&gt;
		&lt;p&gt;
			&lt;select name=&quot;year&quot;&gt;
			&lt;?php
			for($i=date('Y');$i&gt;=1980;$i--){
				?&gt;
				&lt;option value=&quot;&lt;?=$i?&gt;&quot;&gt;&lt;?=$i?&gt;&lt;/option&gt;
				&lt;?php
			}
			?&gt;
			&lt;/select&gt;
		&lt;/p&gt;
		&lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;&lt;?=$translations['add-movie']?&gt;&quot;/&gt;&lt;/p&gt;
	&lt;/form&gt;
	...
	</code>
</pre>

					<p>This is not the final form however. Submitting data right now would attempt to submit the data to the View itself. While it is possible for View to detect that input was submitted to itself and then make that View insert data to database and check for errors, this is not recommended. A lot of older websites are built in this manner and even many web programming tutorials have examples of this, but such an approach is outdated. A View should primarily only deal with logic of the HTML and not with other functionality of the system.</p>
					
					<p>There is also a technical reason why you should never submit data from a form to a View: if you submit data to a View and then click the Back button in your browser, then browsers will throw the 'Re-submit POST' warning to the user. This can be quite an annoyance for the usability of the system and can even cause some data to be submitted unintentionally to the system twice.</p>
					
					<p>In order to not run into this Back button problem as well as to keep the View itself clean from functionality logic of our system, we should make sure that the data is submitted to our API directly. Since we named our form values exactly the same as the values that we use in our Web Service - which was covered in detail in the Web Service tutorial - then this would make the client browser submit the data exactly the same way as we manually submitted it in the previous tutorial.</p>
					
					<p>Movie adding page is the first View that incorporates the Controllers and Models that were developed in the previous tutorial about the Web Service. If you did not do that tutorial, then you should copy the example files from the Web Service tutorial to your current files.</p>
					
					<p>We will be editing these files slightly in this tutorial in order to add additional functionality that we need.</p>
					
					<p>Once you have implemented the Model and Controller file from the previous tutorial, then you should try it out and change the 'action' parameter in the form tag to submit to the API instead of the page itself. Change your form action to the following:</p>
						
<pre>
	<code>
	...
	&lt;form method=&quot;post&quot; action=&quot;json.api?www-command=movies-add&quot;&gt;
	...
	</code>
</pre>

					<p>Now you can try submitting data with the form. You can try and submit the movie 'Brave' with the year 2012 to the list. After submitting you would be confronted with a white page that says the following:</p>

<pre>
	<code>
	{"success":"Movie saved!"}
	</code>
</pre>

					<p>If you did the Web Service tutorial, then this message will seem quite familiar to you.</p>
					
					<p>Because we made a request to JSON API file (filename 'json.api') then Wave Framework returned the data to us as JSON string. We will be changing this later on, but you can always use JSON API (or XML API as 'xml.api') for debugging and see what the response is when you submit data from your forms. And you can change the API file later on (as we will in Part II of this section).</p>
					
					<p>If the above JSON string is not the result that you got, then you should take a look at the example files and see if there was anything different in your code that might have caused it to make your code work differently.</p>
					
					<p>Of course this message is not an ideal solution yet since the user should never see a page like this. Instead we should redirect the user to the movie list View after submitting the movie. But for now, we will leave this page like it is and continue working on it in a later section. This is because the List View is still missing and we cannot redirect our form submission to that page just yet.</p>
					
				<h2>Movie List View</h2>
				
					<p>It is recommended to start building the 'list' View by first copying the 'view.home.php' file and renaming it to 'view.list.php' file in '/views/' subfolder. You should also rename the class name to 'WWW_view_list'. You could also then try and upload the files to the server and click on the List link on your website to make sure that the new View works correctly.</p>
					
					<p>Now we can start implementing the functionality in the View that loads the list of movies and then generates a table from those movies that include links. These links would later on redirect to movie information pages where we show information about only a single movie.</p>
					
					<p>While it would be possible to load the Controller directly from within the View and get the list of movies this way, it is better for this tutorial to show an example of how to use the API internally. Internal API calls are very similar to HTTP API calls, except that Internal API calls never have to be authenticated with API Profile and internal calls also return a PHP variable as a result by default.</p>
					
					<p>In our previous tutorial we built a Web Service that had an API command 'movies-all' that returned the list of all of our movies from database. We can now incorporate this API call in our View generation directly and replace the default content from the Home view with the following code:</p>
						
<pre>
	<code>
	...
	&lt;?php
		$movies=$this-&gt;api('movies-all');
		if(!isset($movies['error'])){
			echo 'Found!';
		} else {
			echo '&lt;p&gt;'.$translations['cannot-find-movies'].'&lt;/p&gt;';
		}
	?&gt;
	...
	</code>
</pre>

					<p>Note that the $movies['error'] is simply the way we returned the result from our API in the Web Service tutorial. You can use whatever returned keys in the array to check if your API call was successful or not. Wave Framework actually also has helper arrays for this purpose, which are recommended over a custom solution like this, but we will stick to the returned 'error' key for now for the sake of keeping things simpler in this tutorial.</p>
					
					<p>After you have added the previous snippet then you should test your page by uploading the files now and seeing if you get a 'Found!' response on your List page or not. You should get a 'Found!' message on the page, since we added a movie through the API in the previous section.</p>
					
					<p>This 'Found!' response is obviously not what we actually want. We should generate a table in the page content instead. This table should also include links. Since we declared a 'movie' View for our movie information pages that also allowed for unsolved URL nodes, then we can easily implement links using the URL of our 'movie' View and appending to it the ID of the movie from our database.</p>
					
					<p>Here is a simple example of a table that has the list of movies as well as the links to those movies pages. Use this to replace the previous 'Found!' line in the code:</p>
						
<pre>
	<code>
	...
	echo '&lt;table id=&quot;movies&quot;&gt;';
	echo '&lt;tr&gt;';
		echo '&lt;th&gt;'.$translations['title'].'&lt;/th&gt;';
		echo '&lt;th&gt;'.$translations['year'].'&lt;/th&gt;';
	echo '&lt;/tr&gt;';
	foreach($movies as $m){
		echo '&lt;tr&gt;';
			echo '&lt;td&gt;&lt;a href=&quot;'.$sitemap['movie']['url'].$m['id'].'/&quot;&gt;'.$m['title'].'&lt;/a&gt;&lt;/td&gt;';
			echo '&lt;td&gt;'.$m['year'].'&lt;/td&gt;';
		echo '&lt;/tr&gt;';
	}
	echo '&lt;/table&gt;';
	...
	</code>
</pre>
						
					<p>When you upload the files and run the page again then you should get a nice list of movies or that single movie. Links of these movies direct to Movie View that we have not yet made, but will make in the next section.</p>
					
				<h2>Single Movie View</h2>
				
					<p>Movie View is the view that will be used to display information about a single movie. Our Web Service only stores movie title and year, but you can easily extend this to include other information, like a link, description, a picture and more.</p>
					
					<p>You should copy your 'view.home.php' file and rename it to 'view.movie.php' file in the '/views/' subfolder. Class name should also be renamed to 'WWW_view_movie'.</p>
					
					<p>Movie View is the only View that was declared in our Sitemap file with the permission to use unsolved URL nodes. This means that we will be able to use the last node in URL and accept it as the ID of the movie in our database.</p>
					
					<p>We will be loading data to our View similarly to how we loaded it for the list View: through an API call. This time we will be making a 'movies-get' request to the API that also requires a variable 'id'. This 'id' variable defines what movie ID we are requesting. The second variable sent to the api() method is an array of all variables that are used as an input to the API call. For example, to make a request to movie that has an ID of 1, then you would make the following request:</p>
						
<pre>
	<code>
	$movieData=$this->api('movies-get',array('id'=>1));
	</code>
</pre>

					<p>We want to use the unsolved URL as the ID for our API call. We can fetch data from the same 'view' State data that we assigned earlier to $view variable for this purpose. This 'unsolved-url' key in that $view variable actually stores an array, since it is possible to have more than one unsolved URL at the same time.</p>
					
					<p>To make our system load the information about the specific movie we have listed, then we have to get the first key in that 'unsolved-url' array. You should replace the current Views page content with the following:</p>
						
<pre>
	<code>
	...
	&lt;p&gt;&lt;?=$translations['movie-info']?&gt;&lt;/p&gt;
	&lt;?php
	if(isset($view['unsolved-url'][0])){
		$movie=$this-&gt;api('movies-get',array('id'=&gt;$view['unsolved-url'][0]));
		if(!isset($movie['error'])){
			?&gt;
			&lt;p&gt;&lt;?=$translations['title']?&gt;: &lt;?=$movie['title']?&gt;&lt;/p&gt;
			&lt;p&gt;&lt;?=$translations['year']?&gt;: &lt;?=$movie['year']?&gt;&lt;/p&gt;
			&lt;?php
		} else {
			echo '&lt;p&gt;'.$translations['cannot-find-movie'].'&lt;/p&gt;';
		}
	} else {
		echo '&lt;p&gt;'.$translations['cannot-find-movie'].'&lt;/p&gt;';
	}
	?&gt;
	&lt;a href=&quot;&lt;?=$sitemap['list']['url']?&gt;&quot;&gt;&lt;?=$translations['back-to-list']?&gt;&lt;/a&gt;
	...
	</code>
</pre>

					<p>If you visit your List page again and click on one of the movies, then you will see that the page now shows a simple table that includes information about the requested movie. And at the same time your request URL is clean, with the movie ID number following the View URL itself. It would also be a good idea to check if other unsolved URL's are defined and throw an error if they are, but this is not important for the scope of the current tutorial.</p>
					
					<p>If you manually change the URL to have an ID that you know doesn't exist, then the page shows a translation for 'cannot-find-movie' keyword as well.</p>
					
				<h2>Adding a Movie - Part II</h2>
				
					<p>Now that we have built all of our Views in the system we can get back to the movie-adding functionality that previously simply produced a JSON string once data was submitted. This JSON string was displayed because the HTTP API file that we used was for JSON API (filename 'json.api').</p>
					
					<p>Another problem with the API was that our Controller - that the API loaded - also did not know where to redirect the user to after the data was submitted. Thus we need a way to define the URL where the client will be redirected to after the movie is submitted. This also means that we have to add some new functionality to our Controller for the purpose of redirecting the client.</p>
					
					<p>So these two problems must be solved:</p>
					
					<ul>
						<li>Redirect the user to a success or failure page after movie data is submitted.</li>
						<li>Do not show JSON string or any other output from the API when the data is submitted.</li>
					</ul>
					
					<p>In order to hide the output we can easily tell Wave Framework API to return data to us in PHP format instead of JSON. PHP format cannot ever be output, which means that regardless of what happens the user that makes the request over HTTP would only ever see a blank page.</p>
					
					<p>All we have to do is change the file URL that we make the request to. This means that we have to change the 'json.api' to 'www.api' and that change alone will make the Wave Framework API return data in PHP format by default. Change the form action URL to this:</p>
						
<pre>
	<code>
	&lt;form method=&quot;post&quot; action=&quot;&lt;?=$view['web-root']?&gt;www.api?www-command=movies-add&quot;&gt;
	</code>
</pre>

					<p>When you add a new movie now then no output is shown anymore, but the movie is actually added to the database if the title and year are not empty.</p>
					
					<p>This still does not solve the problem of how to tell the Controller to redirect us to the 'list' View after movie has been added. Wave Framework has no general rule about how to build this, so it entirely depends on how you, as a developer, want to implement such a feature.</p>
					
					<p>For the purpose of this tutorial I will be adding two hidden variables to my movie-adding form that will tell the Controller where to redirect the client if the movie adding has failed and where to redirect the client if the movie adding was a success. I will be adding these two hidden input tags inside the HTML form:</p>
						
<pre>
	<code>
	...
	&lt;input type=&quot;hidden&quot; name=&quot;success-url&quot; value=&quot;&lt;?=$sitemap['list']['url']?&gt;&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;failure-url&quot; value=&quot;&lt;?=$sitemap['add']['url']?&gt;&quot;&gt;
	...
	</code>
</pre>

					<p>The success URL will redirect the client to movie list and failure URL will redirect the client back to the movie-adding list.</p>
					
					<p>This alone is not enough however. We also need to change our Controller a little to notify Wave Framework about these redirects. Wave Framework API has certain callback keywords that can be used to set headers, such as ones that are required for redirecting the client. Before we add a new feature to our Controller, let's take a look at our current movie-adding Controller method for add(), the way we built it in Web Service tutorial:</p>
						
<pre>
	<code>
	// This function adds a movie in database
	public function add($input){
		if(!isset($input['title']) || $input['title']==''){
			$this-&gt;returnData['error']='Title is missing';
		} else if(!isset($input['year']) || $input['year']==''){
			$this-&gt;returnData['error']='Year is missing';
		} else {
			// This loads the model object from the class we created
			$movie=$this-&gt;getModel('movie');
			$movie-&gt;setTitle($input['title']);
			$movie-&gt;setYear($input['year']);
			if($movie-&gt;saveMovie()){
				$this-&gt;returnData['success']='Movie saved!';
			} else {
				$this-&gt;returnData['error']='Could not save movie!';
			}
		}
		return $this-&gt;returnData;
	}
	</code>
</pre>

					<p>As you can see, this method returns an error when the movie title or year are missing or in case  movie-saving did not work through the Model and the method call failed. We can use this, together with the input value for success and failure URL's, to detect if the client has to be redirected or not. Add this code snippet right before the method returns value to Wave Framework:</p>
						
<pre>
	<code>
	...
	// If an error is detected
	if(isset($this-&gt;returnData['error']) &amp;&amp; isset($input['failure-url'])){
		// This is a callback keyword that sets the redirect header
		$this-&gt;returnData['www-temporary-redirect']=$input['failure-url'];
	} elseif(isset($input['success-url'])){
		// This is a callback keyword that sets the redirect header
		$this-&gt;returnData['www-temporary-redirect']=$input['success-url'];
	}
	...
	</code>
</pre>

					<p>Wave Framework has a small number of callback keywords like the 'www-temporary-redirect' one and they are detailed further in other documentation pages, but for now what this code does is very simple: it checks if redirect URL's are set and if they are set, then returns headers with the response that redirect the client based on the URL's that we sent to the API.</p>
					
					<p>If we now try adding a movie then we will be successfully redirected to movie list where the new movie is listed. This technically is all the core functionality we need to make the website work.</p>
					
				<h2>Handling Failures and Errors</h2>
				
					<p>While our website now works and everything seems to be as expected, we still haven't gotten any error handling in our system. This means that we are not actually notifying a user that a movie was added or that adding a movie has failed.</p>
					
					<p>In this tutorial we will be dealing with errors the 'old school' way. This means that we will simply return a GET variable to the redirected pages and detect their presence in the Views when generating the page</p>

					<p>This is not the best way of doing such a functionality. Wave Framework actually includes a State Messenger, as well as sessions and cookies managers, which can be used for these types of situations. But to keep this tutorial as simple as possible then the 'old school' way is the best way to explain how to notify users in a very simple way.</p>
					
					<p>We will be changing our 'success-url' and 'failure-url' by appending GET variables to both. These are the variables that we then check for in the Views. Modify your hidden form fields to the following:</p>
					
<pre>
	<code>
	&lt;input type=&quot;hidden&quot; name=&quot;success-url&quot; value=&quot;&lt;?=$sitemap['list']['url']?&gt;?ok-notification&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;failure-url&quot; value=&quot;&lt;?=$sitemap['add']['url']?&gt;?fail-notification&quot;&gt;
	</code>
</pre>
						
					<p>And the only remaining is to add the code snippets that would deal with the detection of these variables. Add this to your 'list' View, after the list table:</p>
						
<pre>
	<code>
	// If this is set, then movie was added
	if(isset($input['ok-notification'])){
		echo '&lt;p&gt;&lt;b&gt;'.$translations['movie-added'].'&lt;/b&gt;&lt;/p&gt;';
	}
	</code>
</pre>

					<p>And add this code snippet to the 'add' View, right below the form:</p>
						
<pre>
	<code>
	&lt;?php
		// If this is set, then movie adding failed
		if(isset($input['fail-notification'])){
			echo '&lt;p&gt;&lt;b&gt;'.$translations['problem-adding-movie'].'&lt;/b&gt;&lt;/p&gt;';
		}
	?&gt;
	</code>
</pre>

					<p>If you test your website again then you should see that when you add a movie now, then your website will also display notifications about the success (or failure) of your submissions. And this concludes the code-writing part of this tutorial!</p>
					
			<h2>Where to Next?</h2>
			
				<p>If you already did not do this after the first Web Service tutorial, then I recommend you take a look at the API Documentation section of this documentation, which has multiple documentation pages about all of the options that Wave Framework API offers.</p>
				
				<p>This documentation also has a section called Feature Guides, which mostly focuses on features that you would use when building a website. These cover a broad range of topics from caching to encryptions, user sessions, cookies and more. Feature Guides should teach you more or less everything of importance about Wave Framework and its features.</p>			
				
				<p>This tutorial is also used as the basis for the next tutorial about making AJAX requests with Wave Framework as well as the tutorial about how to set up Users and Permissions for your web system. You can continue to those tutorials from the same code you developed in here.</p>

			<h2>Congratulations!</h2>

				<p>You have created your first fully functional website with Wave Framework! It is easy to take what this tutorial has shown and apply it to making other websites and infosystems and benefit from the set of features that Wave Framework offers.</p>
				
				<p>And at the same time you still have your Web Service and API that you can use and build a User Interface for from other platforms and not just the web.</>
				
				<p>So congratulations and I hope you will have fun experimenting and developing software with Wave Framework!</p>
				
				<p>Good luck!</p>
						
	</body>
</html>