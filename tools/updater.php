<?php/*WWW - PHP micro-frameworkUpdater scriptThis script is used to update WWW Framework application. It downloads an archive from specificURL and unpacks it in the temporary folder where it will be used by FTP to update all files inroot folder of the system.Author and support: Kristo Vaher - kristo@waher.net*/// Main configuration file is includedrequire('..'.DIRECTORY_SEPARATOR.'config.php');// Authentication is always required, all developer tools ignore the http-authentication flag in configuration fileif(!isset($config['http-authentication-username']) || !isset($config['http-authentication-password']) || !isset($_SERVER['PHP_AUTH_USER']) || $_SERVER['PHP_AUTH_USER']!=$config['http-authentication-username'] || !isset($_SERVER['PHP_AUTH_PW']) || $_SERVER['PHP_AUTH_PW']!=$config['http-authentication-password']){	header('WWW-Authenticate: Basic realm="Login"');	header('HTTP/1.1 401 Unauthorized');	echo '<h1>HTTP/1.1 401 Unauthorized</h1>';	echo '<h2>Username and password need to be provided by the client</h2>';	die();}// Error reporting is turned off in this scripterror_reporting(0);// Requiring some maintenance functionsrequire('.'.DIRECTORY_SEPARATOR.'functions.php');// Default version numbers$wwwVersion='1.0.0';$systemVersion='1.0.0';// Getting current version numbers$version=explode("\n",str_replace("\r",'',file_get_contents('..'.DIRECTORY_SEPARATOR.'.version')));foreach($version as $ver){	// Versions are separated by colon in the version file	$thisVersion=explode(':',$ver);	switch($thisVersion[0]){		case 'www':			// www index means version number of core WWW Framework itself			$wwwVersion=$thisVersion[1];			break;		case 'system':			// System version is handled by the developer and should be version of the application built on WWW Framework			$systemVersion=$thisVersion[1];			break;	}}// Nothing has been submitted yetif(empty($_POST) && empty($_GET)){		// This script only works if Zip and FTP functions are supported	if(extension_loaded('Zip') && extension_loaded('ftp')){		?>			<p>Current WWW Framework version: <b><?=$wwwVersion?></b></p>			<p>Current system version: <b><?=$systemVersion?></b></p>			<p><b>APPLY UPDATE:</b></p>			<form method="post" action="" enctype="multipart/form-data">				<p>Update archive URL:</p>				<p><input type="text" name="archive_url" value=""/></p>				<p>Update archive file upload:</p>				<p><input type="file" name="archive_file"/></p>				<p>FTP directory (this is the directory your system is installed in)</p>				<p><input type="text" name="ftp_directory" value="/"/></p>				<p>FTP username</p>				<p><input type="text" name="ftp_username" value=""/></p>				<p>FTP password</p>				<p><input type="password" name="ftp_password" value=""/></p>				<p><input type="submit" value="APPLY UPDATE"/></p>			</form>		<?php	} else {		// required extensions don't seem to be used		trigger_error('Updater requires Zip and FTP PHP extensions',E_USER_ERROR);	}} else if(trim($_REQUEST['ftp_username'])!='' && trim($_REQUEST['ftp_password'])!='' && trim($_REQUEST['ftp_directory'])!=''){	// This script only works if Zip and FTP functions are supported	if(extension_loaded('Zip') && extension_loaded('ftp')){		// If file has been uploaded then this is used instead of archive URL		if(isset($_FILES['archive_file']) && !empty($_FILES['archive_file']) && $_FILES['archive_file']['error']==0){					// Update archive is moved to temporary directory			if(!move_uploaded_file($_FILES['archive_file']['tmp_name'],'..'.DIRECTORY_SEPARATOR.'filesystem'.DIRECTORY_SEPARATOR.'tmp'.DIRECTORY_SEPARATOR.'update.zip')){				// Error is archive file creation failed				trigger_error('Cannot store update archive to temporary files',E_USER_ERROR);			}					} else if(isset($_REQUEST['archive_url']) && trim($_REQUEST['archive_url'])!=''){					// Since archive URL was set, then system downloads the file			$file=file_get_contents($_REQUEST['archive_url']);			if($file){				// Downloaded file contents are placed in update.zip file in temporary directory				if(!file_put_contents('..'.DIRECTORY_SEPARATOR.'filesystem'.DIRECTORY_SEPARATOR.'tmp'.DIRECTORY_SEPARATOR.'update.zip',$file)){					// Error is archive file creation failed					trigger_error('Cannot store update archive to temporary files',E_USER_ERROR);				}			} else {				// Error is thrown if downloading failed				trigger_error('Cannot download update archive from '.$_REQUEST['archive_url'],E_USER_ERROR);			}					} else {			// Since archive file was not set with URL or uploaded file, system throws an error			trigger_error('Update archive was not uploaded or found',E_USER_ERROR);		}				// Zip is used to unpack the update archive		$zip=new ZipArchive;				// Opening the previously created archive		if($zip->open('..'.DIRECTORY_SEPARATOR.'filesystem'.DIRECTORY_SEPARATOR.'tmp'.DIRECTORY_SEPARATOR.'update.zip')){					// This is the directory where update archive contents will be unpacked			$updateArchiveDirectory='..'.DIRECTORY_SEPARATOR.'filesystem'.DIRECTORY_SEPARATOR.'tmp'.DIRECTORY_SEPARATOR.'update'.DIRECTORY_SEPARATOR;					// If cache folder does not exist, it is created			if(!is_dir($updateArchiveDirectory)){				if(!mkdir($updateArchiveDirectory,0777)){					trigger_error('Cannot create update folder',E_USER_ERROR);				}			}					// Archive is unpacked			if($zip->extractTo($updateArchiveDirectory)){								// Connecting to localhost FTP				$ftpConnection=ftp_connect('localhost');								// If connection is a success				if($ftpConnection){									// If log-in with provided authentication is a success					if(ftp_login($ftpConnection,$_REQUEST['ftp_username'],$_REQUEST['ftp_password'])){											// This attempts to change current FTP connection to installation directory						if(ftp_chdir($ftpConnection,$_REQUEST['ftp_directory'])){													// Assigning current FTP directory							$ftpDirectory=$_REQUEST['ftp_directory'];														// Making sure that FTP directory ends in slash							$lastCharacter=strrev($ftpDirectory);							if($lastCharacter[0]!='/'){								$ftpDirectory.='/';							}														// This is the directory where files are							$ftpUpdateDirectory=$ftpDirectory.'filesystem/tmp/update/';													// Installation directory contents							$directoryContents=ftp_nlist($ftpConnection,'.');														// This checks if .version file exists in this directory and is the same size as the current installation and has been modified at the same time							if(in_array('.version',$directoryContents) && ftp_size($ftpConnection,'.version')==filesize('..'.DIRECTORY_SEPARATOR.'.version') && ftp_mdtm($ftpConnection,'.version')==filemtime('..'.DIRECTORY_SEPARATOR.'.version')){								// Target archive of the backup								$backupFilename='system-backup-'.date('Y-m-d-H-i-s').'.zip.tmp';															// This creates a backup of all core files, if this fails then updater will not continue								if(systemBackup('../','..'.DIRECTORY_SEPARATOR.'filesystem'.DIRECTORY_SEPARATOR.'backups'.DIRECTORY_SEPARATOR.$backupFilename)){																		// This stores log messages									$log=array();																	// Since backup was successful									$log[]='SYSTEM BACKUP SAVED TO /filesystem/backups/'.$backupFilename;																// Log will be returned in plain text									header('Content-Type: text/plain;charset=utf-8');																	// Scanning the unpacked archive directory									$files=scandir($updateArchiveDirectory);																		// Notice that files were updated									$log[]='INSTALLING UPDATE FILES';																		// This will loop over all the files if files were found in this directory									if(!empty($files)){										$log=array_merge($log,ftpFileMover($ftpConnection,$ftpUpdateDirectory,$ftpDirectory));									}																		// Notice that files were updated									$log[]='INSTALLATION COMPLETE';																		// If uploader also uploaded an updater script then this is executed and then removed									if(file_exists('../www-updater.php')){																			// Log message for updater script										$log[]='EXECUTING UPDATER SCRIPT';																				// This is the URL that needs to be executed for update to complete										$scriptAddress=str_replace('/tools/updater.php','/www-updater.php?www-version='.$wwwVersion.'&system-version='.$systemVersion,$_SERVER['SCRIPT_URI']);																			// Script is executed over HTTP										$updaterScript=file_get_contents($scriptAddress);																				// If updater script was a success										if($updaterScript){											// Adding log messages from updater script											$log=array_merge($log,explode("\n",$updaterScript));																					// Successful log message for updater script											$log[]='UPDATER SCRIPT COMPLETE';																						// Removing updater script											ftp_delete($ftpConnection,$ftpDirectory.'www-updater.php');																					} else {																					// Failed log message for updater script											$log[]='UPDATER SCRIPT FAILED, PLEASE RUN '.$scriptAddress.' MANUALLY AND THEN DELETE THE FILE';																					}									}																		// Notice that files were updated									$log[]='UPDATE COMPLETE';																		// Printing out plain-text log									echo implode($log,"\n");																} else {																		// Backup creation failed									echo 'Cannot create backup, update halted';																	}														} else {															// This is shown when the installation directory given is different based on .version file information								echo 'Incorrect installation directory';														}													} else {													// This is thrown when FTP cannot move its directory							echo 'Cannot move to installation directory';													}											} else {											// This is thrown when FTP authentication fails						echo 'Cannot log-in to FTP';											}										// Closing FTP connection					ftp_close($ftpConnection);									} else {									// This is thrown when localhost FTP connection does not work					echo 'Cannot connect to localhost with FTP';									}								// Cleaning the update directory and removing the directory				dirCleaner($updateArchiveDirectory);				rmdir($updateArchiveDirectory);							} else {							// This is thrown when it was not possible to unpack the archive				trigger_error('Cannot unpack archive',E_USER_ERROR);							}						// Zip class is closed as the file is not used anymore			$zip->close();						// Archive file is removed			unlink('..'.DIRECTORY_SEPARATOR.'filesystem'.DIRECTORY_SEPARATOR.'tmp'.DIRECTORY_SEPARATOR.'update.zip');					} else {			// Since opening archive fails, the file is removed and error is thrown			unlink('..'.DIRECTORY_SEPARATOR.'filesystem'.DIRECTORY_SEPARATOR.'tmp'.DIRECTORY_SEPARATOR.'update.zip');			trigger_error('Cannot open archive',E_USER_ERROR);		}		} else {		// required extensions don't seem to be used		trigger_error('Updater requires Zip and FTP PHP extensions',E_USER_ERROR);	}} else {	// Error is thrown if downloading failed	trigger_error('FTP authentication is required',E_USER_ERROR);}	?>