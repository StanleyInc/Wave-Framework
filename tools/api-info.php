<?php/*WWW FrameworkAPI command informationThis script lists all controllers and their methods, as well as all API profiles that can use these methods. This is meant for an overview of API commands for documentation purposes or otherwise.Author and support: Kristo Vaher - kristo@waher.net*/// Main configuration file is includedrequire('..'.DIRECTORY_SEPARATOR.'config.php');// Authentication is always required, all developer tools ignore the http-authentication flag in configuration fileif(!isset($config['http-authentication-username']) || !isset($config['http-authentication-password']) || !isset($_SERVER['PHP_AUTH_USER']) || $_SERVER['PHP_AUTH_USER']!=$config['http-authentication-username'] || !isset($_SERVER['PHP_AUTH_PW']) || $_SERVER['PHP_AUTH_PW']!=$config['http-authentication-password']){	header('WWW-Authenticate: Basic realm="Login"');	header('HTTP/1.1 401 Unauthorized');	echo '<h1>HTTP/1.1 401 Unauthorized</h1>';	echo '<h2>Username and password need to be provided by the user agent</h2>';	die();}// Requiring some maintenance functionsrequire('.'.DIRECTORY_SEPARATOR.'functions.php');// Default version numbers$softwareVersions=array();// Getting current version numbers$versionsRaw=explode("\n",str_replace("\r",'',file_get_contents('..'.DIRECTORY_SEPARATOR.'.version')));foreach($versionsRaw as $ver){	// Versions are separated by colon in the version file	$thisVersion=explode(':',$ver);	$softwareVersions[$thisVersion[0]]=$thisVersion[1];}// Factory class is required by all of custom-classesrequire('../engine/class.www-factory.php');// API profile information$apiProfiles=array();// Factory class is required by all of custom-classesrequire('../resources/api.profiles.php');// Getting list of controller files$controllers=fileIndex('../controllers/','files');$controllerFiles=array();// If controllers were foundif($controllers && !empty($controllers)){	// Methods and their comments are stored here	$methodComments=array();	// Looping over controllers and finding suitable ones	foreach($controllers as $controller){		// Controller file name will be checked for controller validity		$controllerFile=explode('.',$controller);		// Simple file-name check		$extension=array_pop($controllerFile);		$className=array_pop($controllerFile);		if($extension=='php' && array_pop($controllerFile)=='/controllers/class'){			// Getting tokens from the file			$tokens=token_get_all(file_get_contents($controller));			// Temporary comment gatherer			$tmpComments=array();			// This is used to check what level token is at			$stage=0;			$prevToken=0;			foreach($tokens as $token){				// Ignoring single matches				if(!is_string($token)){					// Testing based on values					if($token[0]==T_COMMENT || $token[0]==T_DOC_COMMENT){						$stage=1;						// If token is a comment then it is added to comment array						$tmpComments[]=$token[1];					} elseif($token[0]==T_PUBLIC && $stage==1){						$stage=2;					} elseif($token[0]==T_FUNCTION && $stage==2){						$stage=3;					} elseif($token[0]==T_STRING && $stage==3){						// If token is function name that is not in illegal methods list, it is added to functions array						if(strpos($token[1],'WWW_')===false){							$methodComments[$className.'-'.strtolower(str_replace('_','-',$token[1]))]=$tmpComments;						}						// Comments are cleared for next method or token						$tmpComments=array();					} elseif($token[0]==$prevToken){						$tmpComments=array();					} else if($token[0]!=T_WHITESPACE){						// Since token is not whitespace or is not public, token is cleared						$tmpComments=array();					}					$prevToken=$token[0];				}			}		}	}}// Log is printed out in plain text formatheader('Content-Type: text/html;charset=utf-8');// Some basic stylesecho '<div style="font:12px Verdana;">';// Headerecho '<h1>API Documentation</h1>';foreach($softwareVersions as $software=>$version){	echo '<b>'.$software.'</b> ('.$version.') ';}echo '<h2>API commands</h2>';// Looping over found methodsforeach($methodComments as $command=>$comments){	echo '<div style="padding:5px 10px;">';		$allowedProfiles=array();		// Looping over each API profile		foreach($apiProfiles as $key=>$profile){			if(isset($profile['commands']) && ($profile['commands']=='*' || in_array($command,explode(',',$profile['commands'])))){				$allowedProfiles[]=$key;			}		}		// printing out main information		echo '<span style="font-weight:bold;">'.$command.'</span><br/>';		if(!empty($allowedProfiles)){			echo '<span style="font-style:italic; font-size:11px;">Allowed API profiles:</span> '.implode(',',$allowedProfiles).'<br/>';		}		// Printing out comment information, if exists		if(!empty($comments)){			echo '<p style="font-style:italic;font-size:11px;padding:5px;margin:0px;color:#3b3b3b;">';			foreach($comments as $comment){				echo str_replace("\n",'<br/>',trim(str_replace(array('//','/**','/*','*/'),'',$comment))).'</br>';			}			echo '</p>';		}	echo '</div>';}echo '</div>';	?>