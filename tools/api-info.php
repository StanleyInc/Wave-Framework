<?php/*WWW FrameworkAPI command informationThis script lists all controllers and their methods, as well as all API profiles that can use these methods. This is meant for an overview of API commands for documentation purposes or otherwise.Author and support: Kristo Vaher - kristo@waher.net*/// Main configuration file is includedrequire('..'.DIRECTORY_SEPARATOR.'config.php');// Authentication is always required, all developer tools ignore the http-authentication flag in configuration fileif(!isset($config['http-authentication-username']) || !isset($config['http-authentication-password']) || !isset($_SERVER['PHP_AUTH_USER']) || $_SERVER['PHP_AUTH_USER']!=$config['http-authentication-username'] || !isset($_SERVER['PHP_AUTH_PW']) || $_SERVER['PHP_AUTH_PW']!=$config['http-authentication-password']){	header('WWW-Authenticate: Basic realm="Login"');	header('HTTP/1.1 401 Unauthorized');	echo '<h1>HTTP/1.1 401 Unauthorized</h1>';	echo '<h2>Username and password need to be provided by the user agent</h2>';	die();}// Requiring some maintenance functionsrequire('.'.DIRECTORY_SEPARATOR.'functions.php');// Default version numbers$softwareVersions=array();// Getting current version numbers$versionsRaw=explode("\n",str_replace("\r",'',file_get_contents('..'.DIRECTORY_SEPARATOR.'.version')));foreach($versionsRaw as $ver){	// Versions are separated by colon in the version file	$thisVersion=explode(':',$ver);	$softwareVersions[$thisVersion[0]]=$thisVersion[1];}// Factory class is required by all of custom-classesrequire('../engine/class.www-factory.php');// API profile information$apiProfiles=array();// Factory class is required by all of custom-classesrequire('../resources/api.profiles.php');// Getting list of controller files$controllers=fileIndex('../controllers/','files');$controllerFiles=array();// If controllers were foundif($controllers && !empty($controllers)){	// Looping over controllers and finding suitable ones	foreach($controllers as $controller){		// Controller file name will be checked for controller validity		$controllerFile=explode('.',$controller);		// Simple file-name check		$extension=array_pop($controllerFile);		$className=array_pop($controllerFile);		if($extension=='php' && array_pop($controllerFile)=='/controllers/class'){			require($controller);			$controllerFiles[$className]=$controller;		}	}}// Getting all declared classes$classes=get_declared_classes();// Log is printed out in plain text formatheader('Content-Type: text/html;charset=utf-8');// Some basic stylesecho '<div style="font:12px Verdana;">';// Headerecho '<h1>API Documentation</h1>';foreach($softwareVersions as $software=>$version){	echo '<b>'.$software.'</b> ('.$version.') ';}echo '<h2>API commands</h2>';	// Making sure that classes were found	if($classes && !empty($classes)){		// This is list of methods that are ignored for controller calls		$illegalControllerMethods=array(			'__construct','__initialize','__destruct','api','apiconnection','getstate','setstate','getmodel','getcontroller',			'getview','errorarray','successarray','checktruefalse','internallogentry','statemessenger','setstatemessengerdata',			'unsetstatemessengerdata','getstatemessengerdata','startsession','regeneratesession','destroysession','setsession',			'getsession','unsetsession','setcookie','getcookie','unsetcookie','dbsingle','dbmultiple','dbcommand','dblastid',			'dbtransaction','dbrollback','dbcommit','dbescape','dbpdo','terminal'		);		// Looping over each class		foreach($classes as $class){			if(strpos($class,'WWW_controller_')!==false){				// Finding root command name				$commandRoot=str_replace('WWW_controller_','',$class);				// Getting list of defined methods for the class				$methods=get_class_methods($class);				// Looping over each method and making sure it's not listed in illegalControllerMethods				foreach($methods as $m){					if(!in_array(strtolower($m),$illegalControllerMethods)){						echo '<div style="padding:5px 10px;">';							$allowedProfiles=array();							// Looping over each API profile							foreach($apiProfiles as $key=>$profile){								if(isset($profile['commands']) && ($profile['commands']=='*' || in_array($commandRoot.'-'.$m,explode(',',$profile['commands'])))){									$allowedProfiles[]=$key;								}							}							// printing out main information							echo '<span style="font-weight:bold;">'.$commandRoot.'-'.$m.'</span><br/>';							if(!empty($allowedProfiles)){								echo '<span style="font-style:italic; font-size:11px;">Allowed API profiles:</span> '.implode(',',$allowedProfiles).'<br/>';							}							$reflection=new ReflectionMethod($class,$m);							if($reflection){								$comment=$reflection->getDocComment();								if($comment && trim($comment)!=''){									echo '<p style="font-style:italic;font-size:11px;padding:5px;margin:0px;color:#3b3b3b;">'.str_replace("\n",'<br/>',$comment).'</p>';								}							}						echo '</div>';					}				}			}		}	}echo '</div>';	?>