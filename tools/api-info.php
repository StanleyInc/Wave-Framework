<?php/*WWW FrameworkAPI documentation generationThis script lists all controllers and their methods, as well as all API profiles that can use these methods. This is meant for an overview of API commands for documentation purposes or otherwise. It shows all API commands based on what their 'www-command' value should be as well as displays comments that have been written next to these methods. It is also possible to show commands for only specific API profile by defining GET variable 'profile'.Author and support: Kristo Vaher - kristo@waher.net*/// Main configuration file is includedrequire('..'.DIRECTORY_SEPARATOR.'config.php');// Authentication is always required, all developer tools ignore the http-authentication flag in configuration fileif(!isset($config['http-authentication-username']) || !isset($config['http-authentication-password']) || !isset($_SERVER['PHP_AUTH_USER']) || $_SERVER['PHP_AUTH_USER']!=$config['http-authentication-username'] || !isset($_SERVER['PHP_AUTH_PW']) || $_SERVER['PHP_AUTH_PW']!=$config['http-authentication-password']){	header('WWW-Authenticate: Basic realm="Login"');	header('HTTP/1.1 401 Unauthorized');	echo '<h1>HTTP/1.1 401 Unauthorized</h1>';	echo '<h2>Username and password need to be provided by the user agent</h2>';	die();}// If API commands for specific profile only are returnedif(isset($_GET['profile'])){	$apiProfile=$_GET['profile'];} else {	$apiProfile='*';}// Requiring some maintenance functionsrequire('.'.DIRECTORY_SEPARATOR.'functions.php');// Default version numbers$softwareVersions=array();// Getting current version numbers$versionsRaw=explode("\n",str_replace("\r",'',file_get_contents('..'.DIRECTORY_SEPARATOR.'.version')));foreach($versionsRaw as $ver){	// Versions are separated by colon in the version file	$thisVersion=explode(':',$ver);	$softwareVersions[$thisVersion[0]]=$thisVersion[1];}// API profile information$apiProfiles=array();// Factory class is required by all of custom-classesrequire('../resources/api.profiles.php');// Getting list of controller files$controllerFiles=fileIndex('../controllers/','files');// If controllers were foundif($controllerFiles && !empty($controllerFiles)){	// Methods and their comments are stored here	$methodComments=array();	// Looping over controllers and finding suitable ones	foreach($controllerFiles as $controllerFile){		// Controller file name will be checked for controller validity		$controllerFileInfo=explode('.',$controllerFile);		// Simple file-name check		$extension=array_pop($controllerFileInfo);		$className=array_pop($controllerFileInfo);		if($extension=='php' && array_pop($controllerFileInfo)=='/controllers/class'){			// Getting tokens from the file			$tokens=token_get_all(file_get_contents($controllerFile));			// Temporary comment gatherer			$tmpComments=array();			// This is used to check what level token is at			$gatherComments=false;			// This is used to double-check, making sure that the same token is not detected twice in a row			$prevToken=0;			$prevPrevToken=0;			// Looping over tokens			foreach($tokens as $token){				// Ignoring single matches				if(!is_string($token)){					// Testing based on values					if($token[0]==T_COMMENT || $token[0]==T_DOC_COMMENT){						// If token is a comment then it is added to comment array						$tmpComments[]=$token[1];					} elseif($token[0]==T_FUNCTION && $prevPrevToken!=T_PROTECTED && $prevPrevToken!=T_PRIVATE){						// Raising stage if function key is detected						$gatherComments=true;					} elseif($token[0]==T_STRING && $gatherComments){						// If token is function name that is not in illegal methods list, it is added to functions array						if(strpos($token[1],'WWW_')===false){							$methodComments[$className.'-'.strtolower(str_replace('_','-',$token[1]))]=$tmpComments;						}						// Comments are cleared for next method or token						$tmpComments=array();						$gatherComments=false;					} else if($token[0]!=T_WHITESPACE && $token[0]!=T_PUBLIC){						// Since token is not whitespace or is not public, token is cleared						$tmpComments=array();						$gatherComments=false;					}					// Assigning token as previous					$prevPrevToken=$prevToken;					$prevToken=$token[0];				}			}		}	}}// Log is printed out in plain text formatheader('Content-Type: text/html;charset=utf-8');// Some basic stylesecho '<div style="font:12px Verdana;">';	// Header	echo '<h1>API Documentation</h1>';	foreach($softwareVersions as $software=>$version){		// Adding version numbers		echo '<b>'.$software.'</b> ('.$version.') ';	}		// Title for API commands	if($apiProfile!='*'){		echo '<h3>API commands for \''.$apiProfile.'\' profile</h3>';	} else {		echo '<h3>API commands</h3>';	}	// Looping over found methods	foreach($methodComments as $command=>$comments){		$allowedProfiles=array();		// Looping over each API profile		foreach($apiProfiles as $key=>$profile){			if(isset($profile['commands']) && ($profile['commands']=='*' || in_array($command,explode(',',$profile['commands'])))){				$allowedProfiles[]=$key;			}		}		// Displaying information if all API data is shown or if selected profile is listed as allowed for that command		if($apiProfile=='*' || in_array($apiProfile,$allowedProfiles)){			if(empty($allowedProfiles)){				echo '<div style="padding:5px 10px;color:#8c8c8c;font-style:italic;">';			} else {				echo '<div style="padding:5px 10px;">';			}				// printing out main information				echo '<span style="font-weight:bold;">'.$command.'</span><br/>';				if($apiProfile=='*' && !empty($allowedProfiles)){					echo '<span style="font-style:italic; font-size:11px;">Allowed API profiles:</span> '.implode(',',$allowedProfiles).'<br/>';				}				// Printing out comment information, if exists				if(!empty($comments)){					echo '<p style="font-style:italic;font-size:11px;padding:5px;margin:0px;">';					foreach($comments as $comment){						// Stripping comment tags						echo str_replace("\n",'<br/>',trim(str_replace(array('//','/**','/*','*/'),'',$comment))).'</br>';					}					echo '</p>';				}			echo '</div>';		}	}echo '</div>';	?>